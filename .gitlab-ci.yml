default:
  image: python:3.8-slim

stages:
  - lint
  - test
  - document
  - install
  - test_install
  - api

.before_script_template:
  before_script:
    - pip3 install pipenv

lint:
  extends: .before_script_template
  stage: lint
  script:
  - pipenv run pip install flake8
  # stop the build if there are Python syntax errors or undefined names
  - pipenv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  - pipenv run flake8 --ignore=W504 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

test:
  extends: .before_script_template
  stage: test
  variables:
    DATA: "/the_data/data/"
    MODEL: "/the_data/model/"
    PYTHONPATH: '.'
  script:
  - pipenv install -d --skip-lock
  - pipenv run coverage run --source renard_joint,scripts -m pytest
  - pipenv run coverage report
  - python scripts/pipeline.py conll04 evaluate
  - python scripts/pipeline.py internal evaluate
  - python scripts/pipeline.py conll04 predict "Adrien tries data harvesting" "It's probably working"
  - python scripts/pipeline.py internal predict "Dirty company does bad coal activity" "Nice company treats people equally"
  - python scripts/spert.py conll04 evaluate
  - python scripts/spert.py scierc evaluate
  - python scripts/spert.py internal evaluate
  - python scripts/spert.py conll04 predict "Dirty company does bad coal activity" "Nice company treats people equally"
  - python scripts/spert.py scierc predict "Dirty company does bad coal activity" "Nice company treats people equally"
  - python scripts/spert.py internal predict "Dirty company does bad coal activity" "Nice company treats people equally"
  - python scripts/spert.py conll04 train
  - python scripts/spert.py scierc train
  - python scripts/spert.py internal train

document:
  extends: .before_script_template
  stage: document
  script:
  - apt-get install make
  - cd docs
  - make html
  artifacts:
    paths:
      - docs/build/html
    expire_in: 1 week

install:
  stage: install
  script:
  - pipenv install -d --skip-lock
  - pipenv lock -r > requirements.txt
  - pipenv run python3 setup.py sdist bdist_wheel
  artifacts:
    paths:
      - dist
    expire_in: 1 week

test_install:
  stage: test_install
  script:
  - pipenv install -d --skip-lock
  - pipenv lock -r > requirements.txt
  - pipenv install .
  - python pipeline.py conll04 evaluate
  - python pipeline.py internal evaluate
  - python pipeline.py conll04 predict "Adrien tries data harvesting" "It's probably working"
  - python pipeline.py internal predict "Dirty company does bad coal activity" "Nice company treats people equally"
  - python spert.py conll04 evaluate
  - python spert.py scierc evaluate
  - python spert.py internal evaluate
  - python spert.py conll04 predict "Dirty company does bad coal activity" "Nice company treats people equally"
  - python spert.py scierc predict "Dirty company does bad coal activity" "Nice company treats people equally"
  - python spert.py internal predict "Dirty company does bad coal activity" "Nice company treats people equally"
  - python spert.py conll04 train
  - python spert.py scierc train
  - python spert.py internal train

api:
  stage: api
  script:
  - pipenv install -d --skip-lock
  - cd API
  - docker build --build-arg http_proxy=$HTTP_PROXY --build-arg POSTGRES_PASSWORD=CoinCoin -t data_harvesting_api:latest .
  - docker save data_harvesting_api:latest > data_harvesting_api.tar
  artifacts:
    paths:
      - API/data_harvesting_api.tar
    expire_in: 1 week
